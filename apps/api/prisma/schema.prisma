generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Persona {
  TALENT
  EMPLOYER
  INVESTOR
}

enum UserRole {
  USER
  ADMIN
  OPS
  COMPLIANCE
  SUPPORT
  GROWTH
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  REVIEWING
  ACCEPTED
  REJECTED
}

enum EngagementStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  RELEASED
  DISPUTED
}

model User {
  id              String            @id @default(cuid())
  walletAddress   String            @unique
  email           String?           @unique
  nonce           String?
  persona         Persona?
  roles           UserRole[]        @default([USER])
  profile         Profile?
  applications    JobApplication[]
  sessions        Session[]
  engagements     Engagement[]      @relation("UserEngagements")
  stakes          Stake[]
  governanceVotes GovernanceVote[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Profile {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  displayName String
  headline    String?
  bio         String?
  skills      String[]
  links       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  website     String?
  owner       User?    @relation(fields: [ownerId], references: [id])
  ownerId     String?
  jobs        Job[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Job {
  id           String             @id @default(cuid())
  title        String
  description  String
  compensation String?
  location     String?
  tags         String[]
  status       String             @default("OPEN")
  company      Company?           @relation(fields: [companyId], references: [id])
  companyId    String?
  applications JobApplication[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@index([status], map: "idx_job_status")
  @@index([title], map: "idx_job_title")
}

model JobApplication {
  id          String            @id @default(cuid())
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       String
  coverLetter String?
  status      ApplicationStatus @default(SUBMITTED)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([userId, jobId], map: "idx_application_user_job")
}

model ServiceOffering {
  id          String   @id @default(cuid())
  title       String
  summary     String
  tier        String
  price       Decimal  @db.Numeric(18, 2)
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  engagements Engagement[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Engagement {
  id           String           @id @default(cuid())
  requester    User             @relation("UserEngagements", fields: [requesterId], references: [id])
  requesterId  String
  provider     User?            @relation(fields: [providerId], references: [id])
  providerId   String?
  service      ServiceOffering  @relation(fields: [serviceId], references: [id])
  serviceId    String
  status       EngagementStatus @default(DRAFT)
  milestones   Milestone[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Milestone {
  id           String          @id @default(cuid())
  engagement   Engagement      @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  engagementId String
  title        String
  description  String?
  amount       Decimal         @db.Numeric(18, 2)
  status       MilestoneStatus @default(PENDING)
  dueDate      DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Stake {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  poolId    String
  amount    Decimal  @db.Numeric(36, 18)
  tier      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([poolId, userId], map: "idx_stake_pool_user")
}

model GovernanceVote {
  id         String  @id @default(cuid())
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  proposalId String
  support    Boolean
  weight     Decimal @db.Numeric(36, 18)
  createdAt  DateTime @default(now())
}
